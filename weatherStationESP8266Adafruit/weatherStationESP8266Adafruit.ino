#include <TFT_eSPI.h> // Подключаем библиотеку TFT_eSPI
#include <ESP8266HTTPClient.h>
#include <WiFiClient.h>
#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <JsonListener.h>
#include <time.h>
#include "OpenWeatherMapCurrent.h"
#include <NTPClient.h>
#include <WiFiUdp.h>
#include <UnixTime.h> //библиотека для преобразования времени с unix в utc

//шрифты нового дизайна
#include "Golos_Text_Regular12.h" //маленький текст (2 экран)
#include "Golos_Text_Regular22.h" //текст
#include "Golos_Text_Regular30.h" //мельникие цифры
#include "Golos_Text_Regular44.h" //цифры
#include "Golos_Text_Regular84.h" //большие часы

OpenWeatherMapCurrent client;

TFT_eSPI tft = TFT_eSPI(); // Инициализация дисплея

String OPEN_WEATHER_MAP_APP_ID = "13980c74ae68780b82ce16cbec00fae2";
String OPEN_WEATHER_MAP_LOCATION = "Ekaterinburg";
String OPEN_WEATHER_MAP_LANGUAGE = "en";
boolean IS_METRIC = true;

const char* ESP_HOST_NAME = "esp-" + ESP.getFlashChipId();
const char* WIFI_SSID     = "Ayur"; //"Galaxy A52FADF";
const char* WIFI_PASSWORD = "12082005"; //"izzr8141";

const long utcOffsetInSeconds = 18000;
String daysOfTheWeek[7] = {"вс", "пн", "вт", "ср", "чт", "пт", "сб"};
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org", utcOffsetInSeconds);
uint16_t colors[7]={0xF800, 0xFB20, 0xFFE0, 0x87E0, 0x04E0, 0x07FF, 0x03DF};
uint16_t col=0;
 
String monthsNames[13] = {"Заглушка", "января", "февраля", "марта", "апреля", "мая", "июня", "июля", "августа", "сентября", "октября", "ноября", "декабря"};
String weatherNames[7] = {"облачно", "дождливо", "гроза", "солнечно", "морось", "снежно", "туманно"};
int weatherNum = -1;

String dayName2 = "";
String dayName3 = "";
String dayName4 = "";

int oM = 99;

const unsigned char thunder[] PROGMEM = {
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00111110,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000001,B11100011,B11000000,B00000000,B00000000,
  B00000000,B00000000,B00000011,B00000000,B01100000,B00000000,B00000000,
  B00000000,B00000000,B00000100,B00000000,B00110000,B00000000,B00000000,
  B00000000,B00000000,B00001000,B00000000,B00011000,B00000000,B00000000,
  B00000000,B00000000,B00010000,B00000000,B00001100,B00000000,B00000000,
  B00000000,B00000000,B00110000,B00000000,B00000111,B11000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,B01100000,B00000000,
  B00000000,B00001111,B11100000,B00000000,B00000000,B00010000,B00000000,
  B00000000,B00011000,B00000000,B00000000,B00000000,B00011000,B00000000,
  B00000000,B00100000,B00000000,B00000000,B00000000,B00001000,B00000000,
  B00000000,B01100000,B00000000,B00000000,B00000000,B00001100,B00000000,
  B00000000,B01000000,B00000000,B00000000,B00000000,B00001100,B00000000,
  B00000000,B11000000,B00000000,B00000000,B00000000,B00001100,B00000000,
  B00001111,B10000000,B00000000,B00000100,B00000000,B00001000,B00000000,
  B00011000,B00000000,B00000000,B00000100,B00000000,B00001100,B00000000,
  B00110000,B00000000,B00000000,B00001100,B00000000,B00000110,B00000000,
  B00100000,B00000000,B00000000,B00001000,B00000000,B00000010,B00000000,
  B01100000,B00000000,B00000000,B00011000,B00000000,B00000011,B00000000,
  B01000000,B00000000,B00000000,B00010000,B00000000,B00000001,B00000000,
  B01000000,B00000000,B00010000,B00110000,B00000000,B00000001,B00000000,
  B01000000,B00000000,B00110000,B00100000,B00000000,B00000001,B00000000,
  B01100000,B00000000,B00100000,B00100000,B00000000,B00000011,B00000000,
  B00100000,B00000000,B01100000,B01111111,B10000000,B00000010,B00000000,
  B00010000,B00000000,B01000000,B01111111,B10000000,B00000110,B00000000,
  B00011100,B00000000,B01111000,B00000001,B00000000,B00011100,B00000000,
  B00000111,B11111100,B00001000,B00000011,B00111111,B11110000,B00000000,
  B00000000,B00000000,B00011000,B00000010,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00010000,B00000010,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00110000,B00000100,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000100,B00000000,B00000000,B00000000,
  B00000000,B00000000,B01100000,B00001100,B00000000,B00000000,B00000000,
  B00000000,B00000000,B01000000,B00001000,B00000000,B00000000,B00000000,
  B00010000,B00000110,B00000000,B10000000,B00010000,B00000100,B00000000,
  B00110000,B00000100,B00000001,B10000000,B00100000,B00000100,B00000000,
  B00100000,B00001100,B00000001,B00000000,B00100000,B00001100,B00000000,
  B01100000,B00001000,B00000001,B00000000,B01100000,B00001000,B00000000,
  B01000000,B00001000,B00000011,B00000000,B01000000,B00011000,B00000000,
  B01000000,B00000000,B00000010,B00000000,B01000000,B00010000,B00000000
};


const unsigned char drizzle[] PROGMEM = {
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B01111111,B11000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B11100000,B11100000,B00000000,B00000000,
  B00000000,B00000000,B00000011,B10000000,B00111000,B00000000,B00000000,
  B00000000,B00000000,B00000110,B00000000,B00001100,B00000000,B00000000,
  B00000000,B00000000,B00000100,B00000000,B00000110,B00000000,B00000000,
  B00000000,B00000000,B00001100,B00000000,B00000010,B00000000,B00000000,
  B00000000,B00000000,B00011000,B00000000,B00000011,B11100000,B00000000,
  B00000000,B00000000,B00010000,B00000000,B00000001,B11111000,B00000000,
  B00000000,B00000011,B11110000,B00000000,B00000000,B00001100,B00000000,
  B00000000,B00001110,B01110000,B00000000,B00000000,B00000110,B00000000,
  B00000000,B00011000,B00000000,B00000000,B00000000,B00000110,B00000000,
  B00000000,B00100000,B00000000,B00000000,B00000000,B00000010,B00000000,
  B00000000,B01100000,B00000000,B00000000,B00000000,B00000011,B00000000,
  B00000000,B01000000,B00000000,B00000000,B00000000,B00000011,B00000000,
  B00000000,B11000000,B00000000,B00000000,B00000000,B00000011,B00000000,
  B00000111,B11000000,B00000000,B00000000,B00000000,B00000010,B00000000,
  B00011100,B00000000,B00000000,B00000000,B00000000,B00000011,B00000000,
  B00010000,B00000000,B00000000,B00000000,B00000000,B00000001,B00000000,
  B00100000,B00000000,B00000000,B00000000,B00000000,B00000001,B10000000,
  B01100000,B00000000,B00000000,B00000000,B00000000,B00000000,B11000000,
  B01000000,B00000000,B00000000,B00000000,B00000000,B00000000,B11000000,
  B01000000,B00000000,B00000000,B00000000,B00000000,B00000000,B01000000,
  B01000000,B00000000,B00000000,B00000000,B00000000,B00000000,B01000000,
  B01000000,B00000000,B00000000,B00000000,B00000000,B00000000,B01000000,
  B01100000,B00000000,B00000000,B00000000,B00000000,B00000000,B11000000,
  B00100000,B00000000,B00000000,B00000000,B00000000,B00000000,B10000000,
  B00110000,B00000000,B00000000,B00000000,B00000000,B00000001,B10000000,
  B00011000,B00000000,B00000000,B00000000,B00000000,B00000011,B00000000,
  B00001110,B00000000,B00000000,B00000000,B00000000,B00001110,B00000000,
  B00000111,B11111111,B11111111,B11111111,B11111111,B11111100,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B11000000,B00110000,B00001100,B00000011,B00000000,B00000000,
  B00000000,B11000000,B00100000,B00001000,B00000010,B00000000,B00000000,
  B00000000,B10000000,B00100000,B00011000,B00000110,B00000000,B00000000,
  B00000001,B10000000,B01100000,B00010000,B00000100,B00000000,B00000000,
  B00000001,B00000000,B01000000,B00110000,B00000100,B00000000,B00000000,
  B00000001,B00000000,B01000000,B00110000,B00001100,B00000000,B00000000
};


const unsigned char rain[] PROGMEM = {
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B11111110,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000011,B00000001,B10001111,B11110000,B00000000,B00000000,
  B00000000,B00000110,B00000000,B11110000,B00001100,B00000000,B00000000,
  B00000000,B00001100,B00000000,B01000000,B00000110,B00000000,B00000000,
  B00000000,B01111000,B00000000,B10000000,B00000011,B00000000,B00000000,
  B00000001,B10000000,B00000001,B10000000,B00000001,B11100000,B00000000,
  B00000001,B00000000,B00000001,B00000000,B00000000,B00011000,B00000000,
  B00000001,B00000000,B01111111,B00000000,B00000000,B00001100,B00000000,
  B00000001,B00000000,B11000000,B00000000,B00000000,B00000110,B00000000,
  B00000001,B00000001,B10000000,B00000000,B00000000,B00000010,B00000000,
  B00000011,B00000001,B00000000,B00000000,B00000000,B00000010,B00000000,
  B00000110,B00000111,B00000000,B00000000,B00000000,B00000010,B00000000,
  B00000100,B00111000,B00000000,B00000000,B00000000,B00000110,B00000000,
  B00000100,B01100000,B00000000,B00000000,B00000000,B00000011,B00000000,
  B00000100,B01000000,B00000000,B00000000,B00000000,B00000001,B00000000,
  B00000110,B11000000,B00000000,B00000000,B00000000,B00000000,B10000000,
  B00000011,B10000000,B00000000,B00000000,B00000000,B00000000,B10000000,
  B00000001,B10000000,B00000000,B00000000,B00000000,B00000000,B10000000,
  B00000000,B01000000,B00000000,B00000000,B00000000,B00000001,B10000000,
  B00000000,B01000000,B00000000,B00000000,B00000000,B00000001,B00000000,
  B00000000,B00100000,B00000000,B00000000,B00000000,B00000010,B00000000,
  B00000000,B00011111,B11111111,B11111111,B11111111,B11111100,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000010,B00000001,B00000000,B10000000,B01000000,B00110000,B00000000,
  B00000100,B00000010,B00000001,B10000000,B01000000,B00100000,B00000000,
  B00000100,B00000010,B00000001,B00000000,B10000000,B01100000,B00000000,
  B00001000,B00000100,B00000011,B00000000,B10000000,B01000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000001,B00000000,B00000000,
  B00100000,B00010000,B00001000,B00000110,B00000001,B00000000,B00000000,
  B01100000,B00110000,B00001000,B00000100,B00000010,B00000000,B00000000,
  B01000000,B00100000,B00010000,B00001100,B00000010,B00000000,B00000000,
  B11000000,B01100000,B00010000,B00001000,B00000100,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000
};

const unsigned char snow[] PROGMEM = {
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00100000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00100000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00100000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00010000,B00100000,B01000000,B00000000,B00000000,
  B00000000,B00000000,B00011000,B00100000,B11000000,B00000000,B00000000,
  B00000000,B00000000,B00000110,B00100001,B10000000,B00000000,B00000000,
  B00000000,B00000000,B00000011,B00100110,B00000000,B00000000,B00000000,
  B00000000,B00100000,B00000000,B10101100,B00000000,B00100000,B00000000,
  B00000000,B00010000,B00000000,B01110000,B00000000,B01100000,B00000000,
  B00000000,B00010000,B00000000,B00100000,B00000000,B01000000,B00000000,
  B00011100,B00011000,B00000000,B00100000,B00000000,B11000001,B11000000,
  B00000011,B00001000,B00000000,B01110000,B00000000,B10000111,B00000000,
  B00000000,B11101100,B00000000,B11111000,B00000000,B10111000,B00000000,
  B00000000,B00011100,B00000011,B00100110,B00000001,B11000000,B00000000,
  B00000000,B11111111,B11111100,B00100001,B11111111,B11111000,B00000000,
  B00011111,B00000001,B11100000,B00100000,B00111100,B00000111,B11000000,
  B00000000,B00000000,B11011000,B00100000,B11111000,B00000000,B00000000,
  B00000000,B00000000,B01000111,B00100011,B00011000,B00000000,B00000000,
  B00000000,B00000000,B01000001,B11111100,B00010000,B00000000,B00000000,
  B00000000,B00000000,B01000000,B01111000,B00010000,B00000000,B00000000,
  B00000000,B00000000,B01000011,B10100110,B00010000,B00000000,B00000000,
  B00000000,B00000000,B11011100,B00100001,B11011000,B00000000,B00000000,
  B00011100,B00000000,B11100000,B00100000,B00111100,B00000001,B11000000,
  B00000011,B11110011,B11111000,B00100000,B11111110,B01111110,B00000000,
  B00000000,B00011110,B00000111,B00100011,B10000001,B11000000,B00000000,
  B00000000,B01111100,B00000001,B10101100,B00000001,B10110000,B00000000,
  B00000001,B10001000,B00000000,B01111000,B00000000,B10001110,B00000000,
  B00001110,B00001000,B00000000,B00110000,B00000000,B11000011,B10000000,
  B00010000,B00011000,B00000000,B00100000,B00000000,B01000000,B00000000,
  B00000000,B00010000,B00000000,B01110000,B00000000,B01100000,B00000000,
  B00000000,B00110000,B00000000,B11111000,B00000000,B00100000,B00000000,
  B00000000,B00100000,B00000001,B10100110,B00000000,B00100000,B00000000,
  B00000000,B00000000,B00000110,B00100011,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00001100,B00100001,B10000000,B00000000,B00000000,
  B00000000,B00000000,B00010000,B00100000,B01100000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00100000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00100000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000
};

const unsigned char mist[] PROGMEM = {
  B00000000,B00000000,B00000011,B11111000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00001111,B11111111,B10000000,B00000000,B00000000,
  B00000000,B00000000,B00111000,B00000011,B11000000,B00000000,B00000000,
  B00000000,B00000000,B01110000,B00000000,B01100000,B00000000,B00000000,
  B00000000,B00000000,B11000000,B00000000,B00111000,B00000000,B00000000,
  B00000000,B00000011,B10000000,B00000000,B00011111,B11110000,B00000000,
  B00000000,B00000011,B00000000,B00000000,B00011111,B11111110,B00000000,
  B00000000,B00000111,B00000000,B00000000,B00000000,B00001111,B00000000,
  B00000000,B11111111,B11000000,B00000000,B00000000,B00000001,B11000000,
  B00000111,B11000000,B11111000,B00000000,B00000000,B00000001,B11000000,
  B00001111,B00000000,B00111100,B00000000,B00000000,B00000000,B11100000,
  B00011000,B00000000,B00001111,B00000000,B00000000,B00000000,B11100000,
  B01110000,B00000000,B00000111,B10111100,B00000000,B00000000,B11100000,
  B01110000,B00000000,B00000011,B11111111,B11000000,B00000000,B11100000,
  B01100000,B00000000,B00000000,B10000001,B11100000,B00000000,B11100000,
  B11100000,B00000000,B00000000,B00000000,B00111000,B00000000,B11100000,
  B11100000,B00000000,B00000000,B00000000,B00011000,B00000000,B11000000,
  B11100000,B00000000,B00000000,B00000000,B00011100,B00000001,B11000000,
  B11100000,B00000000,B00000000,B00000000,B00011100,B00000011,B00000000,
  B11100000,B00000000,B00000000,B00000000,B00000100,B00011110,B00000000,
  B11100000,B00000000,B00000000,B00000000,B00000111,B11111100,B00000000,
  B01100000,B00000000,B00000000,B00000000,B00000111,B11000000,B00000000,
  B01110000,B00000000,B00000000,B00000000,B00011100,B00000000,B00000000,
  B00011000,B00000000,B00000000,B00000000,B00011100,B00000000,B00000000,
  B00011110,B00000000,B00000000,B00000000,B00111000,B00000000,B00000000,
  B00001111,B00000000,B00000000,B00000000,B01100000,B00000000,B00000000,
  B00000001,B11000000,B00000000,B00000011,B11000000,B00000000,B00000000,
  B00000000,B11111111,B11111111,B11111111,B10000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B11000011,B11110000,B11111001,B11111000,B01100000,B00000000,
  B00000000,B11111111,B11111111,B10111111,B11111111,B11100000,B00000000,
  B00000000,B00111100,B00001111,B00011110,B00000111,B10000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B11000011,B11110000,B11111001,B11111000,B01100000,B00000000,
  B00000000,B11111111,B11111111,B10111111,B11111111,B11100000,B00000000,
  B00000000,B00111100,B00001111,B00011110,B00000111,B10000000,B00000000
};

const unsigned char clearS1[] PROGMEM = {
  B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,
  B00000000,B00100000,B00100000,B00100000,B00000000,
  B00000000,B00100000,B00100000,B01000000,B00000000,
  B00000000,B00010000,B00100000,B01000000,B00000000,
  B00000000,B00001000,B01110000,B10000000,B00000000,
  B00000000,B00001011,B10001111,B10000000,B00000000,
  B00110000,B00001100,B00000001,B10000000,B01100000,
  B00001100,B00010000,B00000000,B11000001,B10000000,
  B00000110,B00100000,B00000000,B00100110,B00000000,
  B00000001,B01000000,B00000000,B00111100,B00000000,
  B00000000,B01000000,B00000000,B00010000,B00000000,
  B00000000,B10000000,B00000000,B00001000,B00000000,
  B00000000,B10000000,B00000000,B00001000,B00000000,
  B00000000,B10000000,B00000000,B00001000,B00000000,
  B00000001,B00000000,B00000000,B00001000,B00000000,
  B00111111,B00000000,B00000000,B00001111,B11100000,
  B00000001,B00000000,B00000000,B00001000,B00000000,
  B00000000,B10000000,B00000000,B00001000,B00000000,
  B00000000,B10000000,B00000000,B00001000,B00000000,
  B00000000,B10000000,B00000000,B00001000,B00000000,
  B00000000,B01000000,B00000000,B00010000,B00000000,
  B00000001,B01000000,B00000000,B00111100,B00000000,
  B00000110,B00100000,B00000000,B00100010,B00000000,
  B00001100,B00010000,B00000000,B11000001,B10000000,
  B00110000,B00001100,B00000001,B10000000,B01100000,
  B00000000,B00001011,B10001111,B10000000,B00000000,
  B00000000,B00011000,B01000000,B10000000,B00000000,
  B00000000,B00010000,B00100000,B01000000,B00000000,
  B00000000,B00100000,B00100000,B01000000,B00000000,
  B00000000,B00100000,B00100000,B00100000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000
};

const unsigned char clouds[] PROGMEM = {
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B01100000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000011,B11111100,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000111,B00001110,B00001111,B11000000,B00000000,B00000000,
  B00000000,B00001100,B00000011,B00011110,B11110000,B00000000,B00000000,
  B00000000,B00011000,B00000001,B11110000,B00011000,B00000000,B00000000,
  B00000000,B00010000,B00000000,B11000000,B00001100,B00000000,B00000000,
  B00000000,B01110000,B00000000,B10000000,B00000110,B00000000,B00000000,
  B00000001,B11100000,B00000001,B10000000,B00000011,B00000000,B00000000,
  B00000011,B00000000,B00000001,B00000000,B00000001,B00000000,B00000000,
  B00000110,B00000000,B00000011,B00000000,B00000001,B11110000,B00000000,
  B00000100,B00000000,B00000010,B00000000,B00000000,B10111000,B00000000,
  B00001100,B00000000,B01111110,B00000000,B00000000,B00001100,B00000000,
  B00001000,B00000000,B11100110,B00000000,B00000000,B00000100,B00000000,
  B00001000,B00000001,B10000000,B00000000,B00000000,B00000010,B00000000,
  B00001000,B00000011,B00000000,B00000000,B00000000,B00000010,B00000000,
  B00000100,B00000010,B00000000,B00000000,B00000000,B00000010,B00000000,
  B00001100,B00000100,B00000000,B00000000,B00000000,B00000011,B00000000,
  B00011000,B00000100,B00000000,B00000000,B00000000,B00000011,B00000000,
  B00010000,B00011100,B00000000,B00000000,B00000000,B00000010,B00000000,
  B00010000,B01111100,B00000000,B00000000,B00000000,B00000010,B00000000,
  B00110000,B11000000,B00000000,B00000000,B00000000,B00000011,B00000000,
  B00110001,B10000000,B00000000,B00000000,B00000000,B00000001,B00000000,
  B00110001,B00000000,B00000000,B00000000,B00000000,B00000001,B10000000,
  B00010011,B00000000,B00000000,B00000000,B00000000,B00000000,B10000000,
  B00010010,B00000000,B00000000,B00000000,B00000000,B00000000,B10000000,
  B00011010,B00000000,B00000000,B00000000,B00000000,B00000000,B11000000,
  B00001110,B00000000,B00000000,B00000000,B00000000,B00000000,B11000000,
  B00000110,B00000000,B00000000,B00000000,B00000000,B00000000,B11000000,
  B00000010,B00000000,B00000000,B00000000,B00000000,B00000000,B10000000,
  B00000011,B00000000,B00000000,B00000000,B00000000,B00000000,B10000000,
  B00000001,B00000000,B00000000,B00000000,B00000000,B00000001,B10000000,
  B00000001,B10000000,B00000000,B00000000,B00000000,B00000001,B00000000,
  B00000000,B11000000,B00000000,B00000000,B00000000,B00000011,B00000000,
  B00000000,B01111111,B11111111,B11111111,B11111111,B11111110,B00000000,
  B00000000,B00011111,B11111111,B11111111,B11111111,B11111000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000
};

const unsigned char bitmapSunrise[] PROGMEM = {
  B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,
  B00000000,B00000000,B01110000,B00000000,B00000000,
  B00000000,B00000000,B11111000,B00000000,B00000000,
  B00000000,B00000001,B00100100,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,
  B00000000,B00100000,B00100000,B00100000,B00000000,
  B00000000,B00100000,B00100000,B01000000,B00000000,
  B00000000,B00010000,B00000000,B01000000,B00000000,
  B00000000,B00001000,B01110000,B10000000,B00000000,
  B00000000,B00000011,B10001111,B00000000,B00000000,
  B00110000,B00001100,B00000001,B10000000,B01100000,
  B00001100,B00010000,B00000000,B11000001,B10000000,
  B00000110,B00100000,B00000000,B00100110,B00000000,
  B00000000,B01000000,B00000000,B00110000,B00000000,
  B00000000,B01000000,B00000000,B00010000,B00000000,
  B00000000,B10000000,B00000000,B00001000,B00000000,
  B00000000,B10000000,B00000000,B00001000,B00000000,
  B00000000,B11111111,B11111111,B11111000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,
  B00111111,B11111111,B11111111,B11111111,B11100000,
  B00000000,B00000000,B00000000,B00000000,B00000000
};

const unsigned char bitmapSunset[] PROGMEM = {
  B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,
  B00000000,B00000001,B00100100,B00000000,B00000000,
  B00000000,B00000000,B11111000,B00000000,B00000000,
  B00000000,B00100000,B01110000,B00100000,B00000000,
  B00000000,B00100000,B00100000,B01000000,B00000000,
  B00000000,B00010000,B00000000,B01000000,B00000000,
  B00000000,B00001000,B01110000,B10000000,B00000000,
  B00000000,B00000011,B10001111,B00000000,B00000000,
  B00110000,B00001100,B00000001,B10000000,B01100000,
  B00001100,B00010000,B00000000,B11000001,B10000000,
  B00000110,B00100000,B00000000,B00100110,B00000000,
  B00000000,B01000000,B00000000,B00110000,B00000000,
  B00000000,B01000000,B00000000,B00010000,B00000000,
  B00000000,B10000000,B00000000,B00001000,B00000000,
  B00000000,B10000000,B00000000,B00001000,B00000000,
  B00000000,B11111111,B11111111,B11111000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,
  B00111111,B11111111,B11111111,B11111111,B11100000,
  B00000000,B00000000,B00000000,B00000000,B00000000
};

String itsMain="";
String desc="";
float temp=0;
uint16_t pres=0;
uint8_t humidity=0;
float wind=0;
int tempF=0;

int tempMin1=100;
int tempMin2=100;
int tempMin3=100;
int tempMin4=100;
int tempMax1=0;
int tempMax2=0;
int tempMax3=0;
int tempMax4=0;
int humidity1=0;
int humidity2=0;
int humidity3=0;
int humidity4=0;
int cnt=0;
String date1="";
String date="";
String country="";

String main2 = "";
String main3 = "";
String main4 = "";
int temp2 = 0;
int temp3 = 0;
int temp4 = 0;
int timeSunrise = 0;
int timeSunset = 0;
uint8_t sunriseH = 0;
uint8_t sunriseM = 0;
uint8_t sunsetH = 0;
uint8_t sunsetM = 0;

int getD=-1;
int getH=-1;
int getM=-1;
int getS=-1;
String fDate="";
String dayName="";
WiFiClient wifiClient;

void connectWifi() {
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to ");
  Serial.println(WIFI_SSID);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected!");
  Serial.println(WiFi.localIP());
  Serial.println();
}

void initScreen() {
  tft.begin();
  tft.setRotation(0); // Установка вертикальной ориентации экрана
  tft.fillScreen(TFT_BLACK); // Заливка фона черным цветом
}

void setup() {
  Serial.begin(9600);
  delay(500);
  connectWifi();
  timeClient.begin();
  getTime();
  getForecastData();
  initScreen();
}

void loop() {
  getTime();
  drawTime();
  drawDate();
  getCurrentData();
  drawScreen1();
  delay(10000);
  getForecastData();
  drawScreen2();
  delay(10000);
  timeForSunriseAndSunset();
  drawScreen3();
  delay(10000);
}

void getTime() {
  timeClient.update();
  getD=timeClient.getDay();
  getH=timeClient.getHours();
  getM=timeClient.getMinutes();
  getS=timeClient.getSeconds();
  fDate=timeClient.getFormattedTime();
  dayName=daysOfTheWeek[getD];
  Serial.print(getD);
  Serial.print(dayName);
  Serial.print(", ");
  Serial.print(getH);
  Serial.print(":");
  Serial.print(getM);
  Serial.print(":");
  Serial.println(getS);
  Serial.println(timeClient.getFormattedTime());
}

void getCurrentData() {
  OpenWeatherMapCurrentData data;
  client.setLanguage(OPEN_WEATHER_MAP_LANGUAGE);
  client.setMetric(IS_METRIC);
  client.updateCurrent(&data, OPEN_WEATHER_MAP_APP_ID, OPEN_WEATHER_MAP_LOCATION);

  itsMain=data.main.c_str();
  desc=data.description.c_str();
  temp=data.temp;
  tempF=(int)(temp);
  pres=data.pressure;
  humidity=data.humidity;
  wind=data.windSpeed;
  Serial.println("main: "+ itsMain);
  Serial.println("description: "+ desc);
  Serial.printf("temp: %f\n", temp);
  Serial.printf("pressure: %d\n", pres);
  Serial.printf("humidity: %d\n", humidity);
  Serial.printf("windSpeed: %f\n", wind);
}

void getForecastData() {
  String serverPath = "http://api.openweathermap.org/data/2.5/forecast?q=" + OPEN_WEATHER_MAP_LOCATION + "&appid=" + OPEN_WEATHER_MAP_APP_ID + "&units=metric&lang=" + OPEN_WEATHER_MAP_LANGUAGE;
  String json = httpGETRequest(serverPath.c_str());

  //updateForecastData(json);
  tempMin1=100;
  tempMin2=100;
  tempMin3=100;
  tempMin4=100;
  tempMax1=0;
  tempMax2=0;
  tempMax3=0;
  tempMax4=0;
  humidity1=0;
  humidity2=0;
  humidity3=0;
  humidity4=0;
  int t=-1;
  t=json.indexOf("dt");
  json=json.substring(t+3,json.length());
  t=-1;
  t=json.indexOf("country");
  country=json.substring(t+10,t+12);
  t=-1;
  t = json.indexOf("sunrise");
  int tSunEnd = json.indexOf("sunset");
  timeSunrise = json.substring(t + 9, tSunEnd - 2).toInt();
  timeSunset = json.substring(tSunEnd + 8, tSunEnd + 18).toInt();
  t = -1;
  date1="";
  t=json.indexOf("dt_txt");
  date1=json.substring(t+9,t+19);

  if (cnt==0) {
    date=date1;
    cnt++;
  }

  int tc=json.substring(t+20,t+22).toInt();
  t=-1;
  tc=(((tc*(-1))+21)/3)+1;

  for (int i=0;i<tc;i++) {
    t=json.indexOf("dt_txt");
    String s=json.substring(0,t+31);
    json=json.substring(t+31,json.length());
    t=-1;
    t=s.indexOf("temp_min");
    int temp=s.substring(t+10,t+13).toInt();
    Serial.println(temp);
    if (tempMin1>temp) tempMin1=temp;
    t=-1;
    t=s.indexOf("temp_max");
    temp=s.substring(t+10,t+13).toInt();
    if (tempMax1<temp) tempMax1=temp;
    t=-1;
    t=s.indexOf("humidity");
    temp=s.substring(t+10,t+12).toInt();
    humidity1=humidity1+temp;
    t=-1;
  }
  humidity1=humidity1/tc;
    
  for(int i=0;i<8;i++) {
    t=json.indexOf("dt_txt");
    String s=json.substring(0,t+31);
    json=json.substring(t+31,json.length());
    t=-1;
    t=s.indexOf("temp_min");
    int temp=s.substring(t+10,t+13).toInt();
    if(tempMin2>temp) tempMin2=temp;
    t=-1;
    t=s.indexOf("temp_max");
    temp=s.substring(t+10,t+13).toInt();
    if(tempMax2<temp) tempMax2=temp;
    t=-1;
    t=s.indexOf("humidity");
    temp=s.substring(t+10,t+12).toInt();
    humidity2=humidity2+temp;
    t=-1;
    t = s.indexOf("main", 30);
    int tEnd = s.indexOf("description");
    main2 = s.substring(t + 7, tEnd - 3);
    t = -1;
    t = s.indexOf("temp");
    temp2 = s.substring(t + 6, t + 9).toInt();
    t = -1;
  }
  humidity2=humidity2/8;
      
  for(int i=0;i<8;i++) {
    t=json.indexOf("dt_txt");
    String s=json.substring(0,t+31);
    json=json.substring(t+31,json.length());
    t=-1;
    t=s.indexOf("temp_min");
    int temp=s.substring(t+10,t+13).toInt();
    if(tempMin3>temp)
    tempMin3=temp;
    t=-1;
    t=s.indexOf("temp_max");
    temp=s.substring(t+10,t+13).toInt();
    if(tempMax3<temp)
    tempMax3=temp;
    t=-1;
    t=s.indexOf("humidity");
    temp=s.substring(t+10,t+12).toInt();
    humidity3=humidity3+temp;
    t=-1;
    t = s.indexOf("main", 30);
    int tEnd = s.indexOf("description");
    main3 = s.substring(t + 7, tEnd - 3);
    t = -1;
    t = s.indexOf("temp");
    temp3 = s.substring(t + 6, t + 9).toInt();
    t = -1;
  }
  humidity3=humidity3/8;

  for(int i=0;i<8;i++) {
    t=json.indexOf("dt_txt");
    String s=json.substring(0,t+31);
    json=json.substring(t+31,json.length());
    t=-1;
    t=s.indexOf("temp_min");
    int temp=s.substring(t+10,t+13).toInt();
    if(tempMin4>temp) tempMin4=temp;
    t=-1;
    t=s.indexOf("temp_max");
    temp=s.substring(t+10,t+13).toInt();
    if(tempMax4<temp)
    tempMax4=temp;
    t=-1;
    t=s.indexOf("humidity");
    temp=s.substring(t+10,t+12).toInt();
    humidity4=humidity4+temp;
    t=-1;
    t = s.indexOf("main", 30);
    int tEnd = s.indexOf("description");
    main4 = s.substring(t + 7, tEnd - 3);
    t = -1;
    t = s.indexOf("temp");
    temp4 = s.substring(t + 6, t + 9).toInt();
    t = -1;
  }
  humidity4=humidity4/8;
    
  json="";
  Serial.println(date1);
  Serial.println();
  Serial.print("Today ");Serial.print("Sunrise - ");Serial.print(timeSunrise);Serial.print(" Sunset - ");Serial.print(timeSunset);Serial.print(" Min Temp - ");Serial.print(tempMin1);Serial.println(" Max Temp - ");Serial.print(tempMax1);Serial.println(" Humidity - ");Serial.println(humidity1);
  Serial.print("Tomorrow ");Serial.print("Temp - ");Serial.print(temp2);Serial.print(" main2 - ");Serial.print(main2);Serial.print(" Min Temp - ");Serial.print(tempMin2);Serial.print(" Max Temp - ");Serial.print(tempMax2);Serial.print(" Humidity - ");Serial.println(humidity2);
  Serial.print("Day After Tomorrow ");Serial.print("Temp - ");Serial.print(temp2);Serial.print(" main3 - ");Serial.print(main3);Serial.print(" Min Temp - ");Serial.print(tempMin3);Serial.print(" Max Temp - ");Serial.print(tempMax3);Serial.print(" Humidity - ");Serial.println(humidity3);
  Serial.print("Today + 3 ");Serial.print("Temp - ");Serial.print(temp2);Serial.print(" main4 - ");Serial.print(main4);Serial.print(" Min Temp - ");Serial.print(tempMin4);Serial.print(" Max Temp - ");Serial.print(tempMax4);Serial.print(" Humidity - ");Serial.println(humidity4);
}


String httpGETRequest(const char* serverName) {
  HTTPClient http; 
  http.begin(wifiClient, serverName);
  
  int httpResponseCode = http.GET();
  
  String payload = "{}"; 
  
  if (httpResponseCode>0) {
    Serial.print("HTTP Response code: ");
    Serial.println(httpResponseCode);
    payload = http.getString();
  }
  else {
    Serial.print("Error code: ");
    Serial.println(httpResponseCode);
  }
  http.end();

  return payload;
}

void drawTime() {
  if (oM != getM) {
    oM = getM;
    int xpos = 5;
    int ypos = 35; // Top left corner ot clock text, about half way down
    tft.loadFont(Golos_Text_Regular84);
    tft.fillRect(2, 34, 235, 100, TFT_BLACK);
    tft.setCursor(xpos, ypos);
    if (getH < 10) { 
      tft.print(0);
      xpos = tft.getCursorX();
    }
    tft.print(getH);
    xpos = tft.getCursorX();
    tft.setCursor(xpos, 35 - 8);
    tft.print(":");
    xpos = tft.getCursorX();
    tft.setCursor(xpos, 35);
    if (getM < 10) {
      tft.print(0);
      xpos = tft.getCursorX();
    }
    tft.print(getM);
    tft.unloadFont();
  }
}

void drawDate() {
  //2025-01-14
  //0123456789
  int year = date.substring(0, 4).toInt();
  int monthNum = date.substring(5, 7).toInt();
  int day = date.substring(8).toInt();
  tft.loadFont(Golos_Text_Regular22);
  tft.setTextColor(TFT_WHITE);
  tft.setCursor(12, 110);
  tft.print(dayName);
  tft.print(", ");
  tft.print(day);
  tft.print(" ");
  tft.print(monthsNames[monthNum]);
  tft.print(", ");
  tft.print(year);
  tft.unloadFont();
}

void drawScreen1() {
  drawTime();
  tft.fillRect(0, 161, 240, 158, TFT_BLACK);

  drawWeatherbitmap(itsMain, 0, 220);
  tft.setCursor(55, 220);
  tft.loadFont(Golos_Text_Regular44);
  tft.setTextColor(TFT_WHITE);
  tft.print(tempF);
  tft.print("°");

  tft.setCursor(140, 220);
  tft.print(humidity);
  tft.unloadFont();

  tft.loadFont(Golos_Text_Regular30);
  tft.print("%");
  tft.unloadFont();

  tft.loadFont(Golos_Text_Regular22);
  tft.setCursor(10, 270);
  findWeatherNum(itsMain);
  tft.print(weatherNames[weatherNum]);

  tft.setCursor(120, 270);
  tft.print("влажность");
  tft.unloadFont();
}

void drawScreen2() {
  drawTime();
  tft.fillRect(0, 161, 240, 158, TFT_BLACK);

  forecastDayName_screen2();
  tft.loadFont(Golos_Text_Regular22);
  tft.setCursor(30, 180);
  tft.print(dayName2);

  tft.setCursor(110, 180);
  tft.print(dayName3);

  tft.setCursor(190, 180);
  tft.print(dayName4);
  tft.unloadFont();

  drawWeatherbitmap(main2, 15, 210);
  drawWeatherbitmap(main3, 95, 210);
  drawWeatherbitmap(main4, 175, 210);

  tft.loadFont(Golos_Text_Regular30);
  tft.setCursor(15, 260);
  tft.print(temp2);
  tft.print("°");

  tft.setCursor(95, 260);
  tft.print(temp3);
  tft.print("°");

  tft.setCursor(175, 260);
  tft.print(temp4);
  tft.print("°");
  tft.unloadFont();

  tft.loadFont(Golos_Text_Regular12);
  tft.setCursor(15, 290);
  findWeatherNum(main2);
  tft.print(weatherNames[weatherNum]);

  tft.setCursor(95, 290);
  findWeatherNum(main3);
  tft.print(weatherNames[weatherNum]);

  tft.setCursor(175, 290);
  findWeatherNum(main4);
  tft.print(weatherNames[weatherNum]);
  tft.unloadFont();
}

void drawScreen3() {
  drawTime();
  tft.fillRect(0, 161, 240, 158, TFT_BLACK);

  tft.drawBitmap(15, 200, bitmapSunrise, 39, 21, TFT_WHITE);
  tft.drawBitmap(130, 200, bitmapSunset, 39, 21, TFT_WHITE);

  tft.setCursor(15, 230);
  tft.loadFont(Golos_Text_Regular22);
  tft.print("восход");

  tft.setCursor(130, 230);
  tft.print("закат");
  tft.unloadFont();

  tft.loadFont(Golos_Text_Regular44);
  tft.setCursor(15, 260);
  tft.print(sunriseH);
  tft.print(":");
  tft.print(sunriseM);

  tft.setCursor(130, 260);
  tft.print(sunsetH);
  tft.print(":");
  tft.print(sunsetM);
  tft.unloadFont();
}

void forecastDayName_screen2() {
  if (getD == 6) {
    dayName2 = daysOfTheWeek[0];
    dayName3 = daysOfTheWeek[1];
    dayName4 = daysOfTheWeek[2];
  }
  else if (getD == 5) {
    dayName2 = daysOfTheWeek[6];
    dayName3 = daysOfTheWeek[0];
    dayName4 = daysOfTheWeek[1];
  }
  else if (getD == 4) {
    dayName2 = daysOfTheWeek[5];
    dayName3 = daysOfTheWeek[6];
    dayName4 = daysOfTheWeek[0];
  }
  else {
    dayName2 = daysOfTheWeek[getD + 1];
    dayName3 = daysOfTheWeek[getD + 2];
    dayName4 = daysOfTheWeek[getD + 3];
  }
}

void drawWeatherbitmap(String mainCur, int xpos, int ypos) {
  if(mainCur.equals("Clouds")) {
    tft.drawBitmap(xpos, ypos, clouds, 51, 38, TFT_WHITE);
  }

  else if(mainCur.equals("Rain")) {
    tft.drawBitmap(xpos, ypos, rain, 51, 40, TFT_WHITE);
  }

  else if(mainCur.equals("Thunderstorm")) {
    tft.drawBitmap(xpos, ypos, thunder, 51, 40, TFT_WHITE);
  }

  else if(mainCur.equals("Clear")) {
    tft.drawBitmap(xpos, ypos, clearS1, 37, 40, TFT_WHITE);
  }

  else if(mainCur.equals("Drizzle")) {
    tft.drawBitmap(xpos, ypos, drizzle, 51, 40, TFT_WHITE);
  }

  else if(mainCur.equals("Snow")) {
    tft.drawBitmap(xpos, ypos, snow, 51, 40, TFT_WHITE);
  }

  else {
    tft.drawBitmap(xpos, ypos, mist, 51, 40, TFT_WHITE);
  }
}

void findWeatherNum(String main) {
  if(main.equals("Clouds")) {
    weatherNum = 0;
  }

  else if(main.equals("Rain")) {
    weatherNum = 1;
  }

  else if(main.equals("Thunderstorm")) {
    weatherNum = 2;
  }

  else if(main.equals("Clear")) {
    weatherNum = 3;
  }

  else if(main.equals("Drizzle")) {
    weatherNum = 4;
  }

  else if(main.equals("Snow")) {
    weatherNum = 5;
  }

  else {
    weatherNum = 6;
  }
}

void timeForSunriseAndSunset() {
  UnixTime stamp(utcOffsetInSeconds / 3600);
  stamp.getDateTime(timeSunrise);
  sunriseH = stamp.hour;
  sunriseM = stamp.minute;
  stamp.getDateTime(timeSunset);
  sunsetH = stamp.hour;
  sunsetM = stamp.minute;
}